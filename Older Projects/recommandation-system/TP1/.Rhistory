mean.star <- mean(u.stars.na, na.rm=T)
Kappa <- 1 / sum(abs(weight))
data.centered <- m.full
data.centered[u.distance.u.stars, is.na(u.stars.na)] <- apply(data.centered[u.distance.u.stars, is.na(u.stars.na)], 1, function(x) length(x))# - length(rowMeans(m.full[u.distance.u.stars,], na.rm=T)))
table(data.centered[u.distance.u.stars, is.na(u.stars.na)])
data.centered[u.distance.u.stars, is.na(u.stars.na)] <- apply(data.centered[u.distance.u.stars, is.na(u.stars.na)], 2, function(x) length(x))# - length(rowMeans(m.full[u.distance.u.stars,], na.rm=T)))
table(data.centered[u.distance.u.stars, is.na(u.stars.na)])
data.centered[u.distance.u.stars, is.na(u.stars.na)] <- apply(data.centered[u.distance.u.stars, is.na(u.stars.na)], 2, function(x) length(rowMeans(m.full[u.distance.u.stars,], na.rm=T)))
table(data.centered[u.distance.u.stars, is.na(u.stars.na)])
data.centered[u.distance.u.stars, is.na(u.stars.na)] <- apply(data.centered[u.distance.u.stars, is.na(u.stars.na)], 2, function(x) x - length(rowMeans(m.full[u.distance.u.stars,], na.rm=T)))
table(data.centered[u.distance.u.stars, is.na(u.stars.na)])
data.centered[is.na(data.centered)] <- 0
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=T)
indices.star.wars <- c(172, 181)
indices.stars <- c(indices.star.trek, indices.star.wars)
u.item$movie.title[indices.stars]
u.stars <- rep(0, dim(m)[2])
u.stars[indices.star.trek] <- 5
u.stars[indices.star.wars] <- 1
u.stars.na <- u.stars
u.stars.na[u.stars==0] <- NA
distance.u.stars <- sqrt(rowSums((u.stars - m)^2))
u.distance.u.stars <- min.nindex(distance.u.stars, 20)
weight <- (cosinus.vm(u.stars, t(m)))[u.distance.u.stars]
mean.star <- mean(u.stars.na, na.rm=T)
Kappa <- 1 / sum(abs(weight))
data.centered <- m.full
data.centered[u.distance.u.stars, is.na(u.stars.na)] <- apply(data.centered[u.distance.u.stars, is.na(u.stars.na)], 2, function(x) x - length(rowMeans(m.full[u.distance.u.stars,], na.rm=T)))
data.centered[is.na(data.centered)] <- 0
vote.commun <- weight %*% (data.centered[u.distance.u.stars,])
estimation.user.user <- mean.star + Kappa * vote.commun
estimation.user.user[estimation.user.user != mean.star]
u.item$movie.title[max.nindex(estimation.user.user,10)]
mean.star
Kappa
vote.commun
table(vote.commun)
weight
(data.centered[u.distance.u.stars,])
head((data.centered[u.distance.u.stars,]))
table((data.centered[u.distance.u.stars,]))
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=T)
indices.star.wars <- c(172, 181)
indices.stars <- c(indices.star.trek, indices.star.wars)
u.item$movie.title[indices.stars]
u.stars <- rep(0, dim(m)[2])
u.stars[indices.star.trek] <- 5
u.stars[indices.star.wars] <- 1
u.stars.na <- u.stars
u.stars.na[u.stars==0] <- NA
distance.u.stars <- sqrt(rowSums((u.stars - m)^2))
u.distance.u.stars <- min.nindex(distance.u.stars, 20)
weight <- (cosinus.vm(u.stars, t(m)))[u.distance.u.stars]
mean.star <- mean(u.stars.na, na.rm=T)
Kappa <- 1 / sum(abs(weight))
data.centered <- m.full
data.centered[u.distance.u.stars, is.na(u.stars.na)] <- apply(data.centered[u.distance.u.stars, is.na(u.stars.na)], 2, function(x) x - rowMeans(m.full[u.distance.u.stars,], na.rm=T))
data.centered[is.na(data.centered)] <- 0
vote.commun <- weight %*% (data.centered[u.distance.u.stars,])
estimation.user.user <- mean.star + Kappa * vote.commun
estimation.user.user[estimation.user.user != mean.star]
u.item$movie.title[max.nindex(estimation.user.user,10)]
round(0.9)
a <- matrix(1:4, 2,2)
a
a<- rbind(a, 2)
a
a<- rbind(a, c(1,3))
a
a <- cbind(a, 6)
a
dim(a)
dim(m)
user.user.pred = function(MY.MATRIX, user.nbr) {
FULL.MATRIX <- as.matrix(MY.MATRIX)
FULL.MATRIX[FULL.MATRIX==0] <- NA
distance.user <- sqrt(rowSums((MY.MATRIX[user.nbr,] - MY.MATRIX)^2))
n.voisins = 21
u.distance.user <- min.nindex(distance.u.stars, n.voisins)
weight <- cosinus.vm(MY.MATRIX[user.nbr,], t(MY.MATRIX))[u.distance.user]
mean.user <- mean(FULL.MATRIX[user.nbr,], na.rm=T)
Kappa <- 1 / sum(abs(weight))
data.centered <- FULL.MATRIX
data.centered[u.distance.user, is.na(FULL.MATRIX[user.nbr,])] <- apply(data.centered[u.distance.user, is.na(FULL.MATRIX[user.nbr,])], 2, function(x) x - rowMeans(FULL.MATRIX[u.distance.user,], na.rm=T))
data.centered[is.na(data.centered)] <- 0
vote.commun <- weight %*% (data.centered[u.distance.user,])
estimation.user.user <- mean.star + Kappa * vote.commun
estimation.user.user
}
u.stars <- rep(0, dim(m)[2])
u.stars[indices.star.trek] <- 5
u.stars[indices.star.wars] <- 1
mod.m <- rbind(m, u.stars)
user.user.pred(mod.m, dim(mod.m)[1])
# rÃ©cuperer les film star trek et star wars
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=T)
estimated2 <- user.user.pred(mod.m, dim(mod.m)[1])
table(estimated2)
length(table(estimated2))
u.item$movie.title[max.nindex(estimated2,10)]
u.item$movie.title[max.nindex(estimation.user.user,10)]
user.user.pred = function(MY.MATRIX, user.nbr) {
FULL.MATRIX <- as.matrix(MY.MATRIX)
FULL.MATRIX[FULL.MATRIX==0] <- NA
distance.user <- sqrt(rowSums((MY.MATRIX[user.nbr,] - MY.MATRIX)^2))
n.voisins = 21
u.distance.user <- min.nindex(distance.u.stars, n.voisins)
weight <- cosinus.vm(MY.MATRIX[user.nbr,], t(MY.MATRIX))[u.distance.user]
mean.user <- mean(FULL.MATRIX[user.nbr,], na.rm=T)
Kappa <- 1 / sum(abs(weight))
data.centered <- FULL.MATRIX
data.centered[u.distance.user, is.na(FULL.MATRIX[user.nbr,])] <- apply(data.centered[u.distance.user, is.na(FULL.MATRIX[user.nbr,])], 2, function(x) x - rowMeans(FULL.MATRIX[u.distance.user,], na.rm=T))
data.centered[is.na(data.centered)] <- 0
vote.commun <- weight %*% (data.centered[u.distance.user,])
estimation.user.user <- mean.star + Kappa * vote.commun
estimation.user.user
}
# rÃ©cuperer les film star trek et star wars
indices.star.trek <- grep("trek", as.character(u.item$movie.title), ignore.case=T)
indices.star.wars <- c(172, 181)
indices.stars <- c(indices.star.trek, indices.star.wars)
u.stars <- rep(0, dim(m)[2])
u.stars[indices.star.trek] <- 5
u.stars[indices.star.wars] <- 1
mod.m <- rbind(m, u.stars)
estimated2 <- user.user.pred(mod.m, dim(mod.m)[1])
length(table(estimated2))
u.item$movie.title[max.nindex(estimated2,10)]
m.known <- m[,m[,450] != 0]
m.known[,m[,450] == 0]
m.known <- m[m[,450] != 0]
m.known <- m[,m[,450] != 0]
dim(m.known)
m.known <- m[m[,450] != 0]
m[,450] != 0
m.known <- m[m[,450] != 0,]
dim(known)
dim(m.known)
m.known[m[,450] != 0,]
m.known[m.known[,450] != 0,]
m.known[m.known[,450] == 0,]
item.ids <- 1:dim(m)[2]
item.ids
length(item.ids)
?sample
to.remove <- sample(item.ids, dim(m)[2] * percent / 100)
##### QUESTION 4 #####
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m)[2]
to.remove <- sample(item.ids, dim(m)[2] * percent / 100)
to.remove
to.keep <- item.ids[!to.remove]
to.keep
item.ids[-to.remove]
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m)[2]
to.remove <- sample(item.ids, dim(m)[2] * percent / 100)
to.keep <- item.ids[-to.remove]
dim(to.remove)
length(to.remove)
length(to.keep)
length(to.remove)+ length(to.keep)
m.modiv[to.remove, ] <- 0
m.modiv[to.remove, ] <- 0
m.modiv <- m.known
m.modiv[to.remove, ] <- 0
##### QUESTION 4 #####
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- m.known
m.modiv[to.remove, ] <- 0
##### QUESTION 4 #####
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m.known)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- m.known
m.modiv[to.remove, ] <- 0
m.modiv
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m.known)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- m.known
m.modiv[to.remove, 450] <- 0
m.modiv[to.remove, 450]
to.remove
m.modiv[t, 450]
m.modiv[, 450]
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m.known)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- m.known
m.modiv[to.remove, 450] <- 0
item.item.pred(m.modiv, 450)
item.item.pred = function(MY.MATRIX, item.nbr) {
FULL.MATRIX <- as.matrix(MY.MATRIX)
FULL.MATRIX[FULL.MATRIX==0] <- NA
distance.item <- sqrt(colSums((MY.MATRIX[,item.nbr] - MY.MATRIX)^2))
n.voisins = 21
i.distance.item <- min.nindex(distance.item, n.voisins) # 20 voisins les plus proches
weight <- cosinus.vm(MY.MATRIX[,item.nbr], MY.MATRIX)[i.distance.item]
mean.item <- mean(FULL.MATRIX[,item.nbr], na.rm=T)
Kappa <- 1 / sum(abs(weight))
data.centered <- FULL.MATRIX
data.centered[is.na(FULL.MATRIX[,450]), i.distance.item] <- apply(data.centered[is.na(FULL.MATRIX[,item.nbr]), i.distance.item], 1, function(x) x - colMeans(FULL.MATRIX[,i.distance.item], na.rm=T))
data.centered[is.na(FULL.MATRIX[,450]), i.distance.item]
data.centered[is.na(data.centered)] <- 0
vote.commun <- weight %*% t(data.centered[, i.distance.item])
estimation.item.item <- mean.item + Kappa * vote.commun
estimation.item.item[vote.commun == 0] <- NA
estimation.item.item
}
estimated <- item.item.pred(m, 450)
dim(table(estimated))
##### QUESTION 4 #####
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m.known)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- m.known
m.modiv[to.remove, 450] <- 0
item.item.pred(m.modiv, 450)
m.known <- m[m[,450] != 0,]
percent <- 10 #%
item.ids <- 1:dim(m.known)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- m.known
m.modiv[to.remove, 450] <- 0
rmse <- item.item.pred(m.modiv, 450)
dim(table(rmse))
rmse <- sqrt(sum(m.known[to.remove, 450] - pred[to.remove, 450]))
pred <- item.item.pred(m.modiv, 450)
rmse <- sqrt(sum(m.known[to.remove, 450] - pred[to.remove, 450]))
dim(pred)
rmse <- sqrt(sum(m.known[to.remove] - pred[to.remove, 450]))
rmse <- sqrt(sum(m.known[to.remove, 450] - pred[to.remove]))
rmse
rmse <- sqrt(sum(m.known[, 450] - pred))
rmse2 <- sqrt(sum(m.known[, 450] - pred))
pred
m.known[, 450]
pred
pred[is.na(pred)]
m.known[is.na(m.knowm), 450]
m.known[is.na(m.known), 450]
a<-m.known[450]
a
a<-m.known[,450]
a
?sparse
?sparseMatrix
as.matrix(m.known)
as.matrix(m.known)[is.na(as.matrix(m.known))]
rmse2 <- sqrt(sum(as.matrix(m.known)[to.remove, 450] - pred[to.remove]))
rmse2
rmse1
rmse
rmse <- sqrt(sum(m.known[to.remove, 450] - pred[to.remove]))
rmse
rmse2 <- sqrt(sum(as.matrix(m.known)[, 450] - pred))
rmse2 <- sqrt(sum(as.matrix(m.known)[, 450] - pred))
##### QUESTION 4 #####
rmse <- function(MY.MATRIX, percent, iter) {
rmse <- 0
for (i in 1:iter) {
item.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum(MY.MATRIX[to.remove, 450] - pred[to.remove]) / length(to.remove))
dim(table(rmse))
}
rmse / iter
}
m.known <- m[m[,450] != 0,]
rmse(m.known, 10, 20)
##### QUESTION 4 #####
rmse <- function(MY.MATRIX, percent, iter) {
rmse <- 0
for (i in 1:iter) {
item.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
dim(table(rmse))
}
rmse / iter
}
m.known <- m[m[,450] != 0,]
rmse(m.known, 10, 20)
##### QUESTION 4 #####
rmse <- function(MY.MATRIX, percent, iter) {
rmse <- 0
rmse2 <- 0
for (i in 1:iter) {
item.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(item.ids, length(item.ids) * percent / 100)
to.keep <- item.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
rmse2 <- rmse2 + sqrt(sum((MY.MATRIX[, 450] - pred)^2) / length(to.remove))
dim(table(rmse))
}
c(rmse, rmse2) / iter
}
m.known <- m[m[,450] != 0,]
rmse(m.known, 10, 20)
rmse(m.known, 10, 20)
rmse(m.known, 10, 20)
rmse(m.known, 10, 20)
rmse_iter_item <- function(MY.MATRIX, percent.item, percent.user, iter) {
item.ids <- 1:dim(MY.MATRIX)[2]
to.test <- sample(item.ids, length(item.ids) * percent.item / 100)
rmse <- c(0, 0)
for (i in to.test) {
rmse <- rmse + rmse.iter(MY.MATRIX, i, percent, iter)
}
rmse / length(to.test)
}
rmse.iter(m.known, 10, 10, 100)
rmse.iter.item(m.known, 10, 10, 100)
rmse_iter_item <- function(MY.MATRIX, percent.item, percent.user, iter) {
item.ids <- 1:dim(MY.MATRIX)[2]
to.test <- sample(item.ids, length(item.ids) * percent.item / 100)
rmse <- c(0, 0)
for (i in to.test) {
rmse <- rmse + rmse.iter(MY.MATRIX, i, percent, iter)
}
rmse / length(to.test)
}
rmse_iter_item(m.known, 10, 10, 100)
rmse_iter <- function(MY.MATRIX, item.nbr, percent, iter) {
rmse <- 0
rmse2 <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
rmse2 <- rmse2 + sqrt(sum((MY.MATRIX[, 450] - pred)^2) / length(to.remove))
dim(table(rmse))
}
c(rmse, rmse2) / iter
}
m.known <- m[m[,450] != 0,]
rmse.iter(m.known, 450, 10, 100)
rmse_iter_item <- function(MY.MATRIX, percent.item, percent.user, iter) {
item.ids <- 1:dim(MY.MATRIX)[2]
to.test <- sample(item.ids, length(item.ids) * percent.item / 100)
rmse <- c(0, 0)
for (i in to.test) {
rmse <- rmse + rmse.iter(MY.MATRIX, i, percent, iter)
}
rmse / length(to.test)
}
rmse_iter_item(m.known, 10, 10, 100)
##### QUESTION 4 #####
rmse_iter <- function(MY.MATRIX, item.nbr, percent, iter) {
rmse <- 0
rmse2 <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
rmse2 <- rmse2 + sqrt(sum((MY.MATRIX[, 450] - pred)^2) / length(to.remove))
dim(table(rmse))
}
c(rmse, rmse2) / iter
}
##### QUESTION 4 #####
rmse_iter <- function(MY.MATRIX, item.nbr, percent, iter) {
rmse <- 0
rmse2 <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
rmse2 <- rmse2 + sqrt(sum((MY.MATRIX[, 450] - pred)^2) / length(to.remove))
dim(table(rmse))
}
c(rmse, rmse2) / iter
}
m.known <- m[m[,450] != 0,]
rmse_iter(m.known, 450, 10, 100)
rmse_iter_item <- function(MY.MATRIX, percent.item, percent.user, iter) {
item.ids <- 1:dim(MY.MATRIX)[2]
to.test <- sample(item.ids, length(item.ids) * percent.item / 100)
rmse <- c(0, 0)
for (i in to.test) {
rmse <- rmse + rmse_iter(MY.MATRIX, i, percent, iter)
}
rmse / length(to.test)
}
rmse_iter_item(m.known, 10, 10, 100)
rmse_iter_item(m.known, 2, 10, 10)
rmse_iter_item(m.known, 10, 10, 10)
rmse_iter <- function(MY.MATRIX, fun, item.nbr, percent, iter) {
rmse <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
dim(table(rmse))
}
rmse / iter
}
m.known <- m[m[,450] != 0,]
rmse_iter(m.known, 450, 10, 100)
rmse_iter_item <- function(MY.MATRIX, fun, percent.item, percent.user, iter) {
item.ids <- 1:dim(MY.MATRIX)[2]
to.test <- sample(item.ids, length(item.ids) * percent.item / 100)
rmse <- 0
for (i in to.test) {
rmse <- rmse + rmse_iter(MY.MATRIX, i, percent, iter)
}
rmse / length(to.test)
}
rmse_iter_item(m.known, item.item.pred, 10, 10, 10)
##### QUESTION 4 #####
rmse_iter <- function(MY.MATRIX, fun, item.nbr, percent, iter) {
rmse <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- item.item.pred(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
dim(table(rmse))
}
rmse / iter
}
##### QUESTION 4 #####
rmse_iter <- function(MY.MATRIX, fun, item.nbr, percent, iter) {
rmse <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- fun(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
dim(table(rmse))
}
rmse / iter
}
m.known <- m[m[,450] != 0,]
rmse_iter(m.known, 450, 10, 100)
source('~/Documents/UCL_Montreal_2018_2019/LOG6308/TP1/TP1.R', echo=TRUE)
##### QUESTION 4 #####
rmse_iter <- function(MY.MATRIX, fun, item.nbr, percent, iter) {
rmse <- 0
for (i in 1:iter) {
user.ids <- 1:dim(MY.MATRIX)[1]
to.remove <- sample(user.ids, length(user.ids) * percent / 100)
to.keep <- user.ids[-to.remove]
m.modiv <- MY.MATRIX
m.modiv[to.remove, 450] <- 0
pred <- fun(m.modiv, 450)
rmse <- rmse + sqrt(sum((MY.MATRIX[to.remove, 450] - pred[to.remove])^2) / length(to.remove))
dim(table(rmse))
}
rmse / iter
}
m.known <- m[m[,450] != 0,]
rmse_iter(m.known, item.item.pred, 450, 10, 100)
rmse_iter_item <- function(MY.MATRIX, fun, percent.item, percent.user, iter) {
item.ids <- 1:dim(MY.MATRIX)[2]
to.test <- sample(item.ids, length(item.ids) * percent.item / 100)
rmse <- 0
for (i in to.test) {
rmse <- rmse + rmse_iter(MY.MATRIX, fun, i, percent, iter)
}
rmse / length(to.test)
}
rmse_iter_item(m.known, item.item.pred, 10, 10, 10)

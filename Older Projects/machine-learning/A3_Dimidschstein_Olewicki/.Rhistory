x = c(2,7,5)
x
y = seq(from=4,length=3, by=3)
y
?seq
x+y
x + y
x/y
x^y
x[2]
x[2:3]
x[-2]
c(1,2)
c(1,3)
z = matrix(seq(1,12), 4, 3)
z
z[3:4,2:3]
z[,2:3]
ls()
rm(y)
ls()
x = runif(50)
x
y = rnorm(50)
plot(x,y)
plot(x,y)
plot(x,y,xlab="Random Uniform", ylab = "Random Normal", pch = "*", col = "blue")
par(mfrow=c(2,1))
plot(x,y)
hist(y)
Auto = read.csv("bodyfat.csv")
Auto = read.csv("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/bodyfat.csv")
names(Auto)
dim(Auto)
class(Auto)
summary(Auto)
plot(Auto$X,Auto$Density)
Auto = read.csv("./bodyfat.csv")
attach(Auto)
search()
plot(X,Density)
library()
source("Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
?runif
x <- 1:4
x
size(x)
length(x)
length(x)
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
rm(sqloss)
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
clean()
clean <- function() {}
clean <- function() {env = .GlobalEnv rm(list=ls(envir=env), envir=env)}
clean <- function() {env = .GlobalEnv rm(list=ls(envir=env), envir=env)}
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
clean()
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
clean()
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
?apply
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
?optimize
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
dimnames(bodyfat)
dimnames(bodyfat)
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
bodyfat
dim(bodyfat)
source("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/Assignment1.R")
pairs(bodyfat)
pairs(bodyfat[,c("BFI","Weight", "Height")])
setwd("~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/A3_Dimidschstein_Olewicki")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
a
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
source("assignment3.R")
dim(mySVM$SV)
sum(mySVM$index)
mySVM$index
mySVM <- svm(x=lettersTrain[2:length(lettersTrain)-1], y=as.numeric(lettersTrain$labels), kernel="poly", degree=2, gamma=(1/(dim(lettersTrain)[2]-2)) /2, coef0=-1, cost=0.5)
dim(mySVM$SV)
mySVM <- svm(x=lettersTrain[2:length(lettersTrain)-1], y=as.numeric(lettersTrain$labels), kernel="poly", degree=4, gamma=(1/(dim(lettersTrain)[2]-2)) /2, coef0=-1, cost=0.5)
errorRate(mySVM, lettersTrain)
errorRate(mySVM, lettersTest)
c(4,2,5)
A = c(4,2,5)
B=c(1,2,3)
sum = (A==B)/length(a)
sum = (A==B)/length(A)
sum
sum(A==B)/length(A)
errorRate <- function(mySVM, data) {
expected = data$labels  # Expected result
pred = predict(mySVM, data[2:length(data)-1])
pred[pred>26] = 26        # Round high values
pred[pred<1] = 1          # Round low values
predicted = factor(LETTERS[pred])
err = sum((as.character(expected)==as.character(predicted)))/length(expected)
# err = sum(abs(as.numeric(expected)-as.numeric(predicted)))/length(expected)
err
}
errorRate(mySVM, lettersTest)
errorRate(mySVM, lettersTrain)
dim(lettersTrains[2:length(lettersTrain)-1])
dim(lettersTrain[2:length(lettersTrain)-1])
dim(lettersTrain)
lettersTrain[length(lettersTrain)-1]
predict(mySVM, lettersTrain[2:length(lettersTrain)-1])
data(predict(mySVM, lettersTrain[2:length(lettersTrain)-1]))
dim(predict(mySVM, lettersTrain[2:length(lettersTrain)-1]))
length(predict(mySVM, lettersTrain[2:length(lettersTrain)-1]))
as.numeric(lettersTrain$labels)
mySVM2 <- svm(x=lettersTrain[2:length(lettersTrain)-1], y=as.numeric(lettersTrain$labels))
predict(mySVM2, lettersTrain[2:length(lettersTrain)-1])
errorRate(mySVM2, lettersTrain)
errorRate <- function(mySVM, data) {
expected = data$labels  # Expected result
pred = predict(mySVM, data[2:length(data)-1])
pred[pred>26] = 26        # Round high values
pred[pred<1] = 1          # Round low values
predicted = factor(LETTERS[pred])
err = sum((expected==predicted))/length(expected)
# err = sum(abs(as.numeric(expected)-as.numeric(predicted)))/length(expected)
err
}
errorRate(mySVM2, lettersTrain)
mySVM2 <- svm(x=lettersTrain[2:length(lettersTrain)-1], y=as.numeric(lettersTrain$labels))
errorRate(mySVM2, lettersTrain)
source('assignment3.R')
source('assignment3.R')
errorRate <- function(mySVM, data) {
expected = data$labels  # Expected result
predicted = predict(mySVM, data)
err = sum(expected==predicted)/length(expected)
# err = sum(abs(as.numeric(expected)-as.numeric(predicted)))/length(expected)
err
}
mysvm <- svm(labels ~ ., data = lettersTrain)
errorRate(mysvm, lettersTrain)
errorRate(mysvm, lettersTrain)
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
0.
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
acc_train
acc_test
plot(x=nbr_SV, y=acc_train, col='green')
lines(x=nbr_SV, y=acc_test, col='red')
plot(x=nbr_SV, y=acc_train, col='blue')
plot(x=nbr_SV, y=acc_train, col='green')
plot(x=nbr_SV, y=acc_train, col='blue')
lines(x=nbr_SV, y=acc_test, col='red')
plot(x=nbr_SV, y=acc_test, col='red')
nbr_SV
source('assignment3.R')
source('~/Documents/UCL_EPL_2017_2018/Q2/LINGI2262 Machine Learning - classification and evaluation/A3_Dimidschstein_Olewicki/assignment3.R', echo=TRUE)
source('assignment3.R')
plot(nbr_SV, acc_train, col='green')
points(nbr_SV, acc_test, col='red')
plot(nbr_SV, acc_train, col='blue')
points(nbr_SV, acc_test, col='red')
plot(nbr_SV, acc_test, col='red')
points(nbr_SV, acc_train, col='red')
plot(nbr_SV, acc_train,xlab="gdf", ylab = "fds", col='green')
points(nbr_SV, acc_test, col='red')
plot(nbr_SV, acc_train,xlab="gdf", ylab = "fds", col='green')
plot(nbr_SV, acc_test, col='red')
plot(nbr_SV, acc_train,xlab="gdf", ylab = "fds", col='blue')
plot(nbr_SV, acc_test, col='red')
plot(nbr_SV, acc_train,xlab="gdf", ylab = "fds", col='green')
par(new=TRUE)
points(nbr_SV, acc_test, col='red')
source('assignment3.R')
source('assignment3.R')
plot(nbr_SV, acc_train, col='green')
points(nbr_SV, acc_test, col='red')
plot(nbr_SV, acc_train, col='green', xlab="Number of SV", ylab="Accuracy")
points(nbr_SV, acc_test, col='red')
legend(-1, 1.9, c("Train", "Test"))
plot(nbr_SV, acc_train, col='green', xlab="Number of SV", ylab="Accuracy", pch=16)
points(nbr_SV, acc_test, col='red', pch=17)
legend(1, 95, legend=c("Line 1", "Line 2"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
source('assignment3.R')
source('assignment3.R')
source('assignment3.R')
plot(x=nbr_SV, y=acc_train, col='green', xlab="Number of SV", ylab="Accuracy", pch=16)
points(x=nbr_SV, y=acc_test, col='red', pch=17)
min(acc_test)
min(acc_test)
plot(x=nbr_SV, y=acc_test, col='green', xlab="Number of SV", ylab="Accuracy", pch=16)
points(x=nbr_SV, y=acc_train, col='red', pch=17)
max(acc_train)
plot(x=nbr_SV, y=acc_test, col='green', xlab="Number of SV", ylab="Accuracy", pch=16, ylim=c(0.5, 1))
points(x=nbr_SV, y=acc_train, col='red', pch=17)
jpeg('q4_accur_SV.jpg')
plot(x=nbr_SV, y=acc_train, col='green', xlab="Number of SV", ylab="Accuracy", pch=16, ylim=c(0.5, 1))
points(x=nbr_SV, y=acc_test, col='red', pch=17)
dev.off()

jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
MY.USER.VOTES[, genres]
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
# cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
MY.USER.VOTES[, genres]
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
# cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
genres
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
head(users.mean.votes)
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[6:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[6:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
mean.votes.genre
}
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[6:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[6:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
colnames(mean.votes.genre) <- genres
mean.votes.genre
}
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[6:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[6:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
colnames(mean.votes.genre) <- genres
mean.votes.genre
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[6:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[6:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
mean.votes.genre
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
head(users.mean.votes)
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[6:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[6:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre[genres])
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
}
gender.binary <- function(MY.USER.VOTES) {
MY.USER.VOTES[,"gender"] <- MY.USER.VOTES[,"gender"] == "M"
MY.USER.VOTES[MY.USER.VOTES[,"gender"] == TRUE,"gender"] <- 1
MY.USER.VOTES[MY.USER.VOTES[,"gender"] == FALSE,"gender"] <- 0
MY.USER.VOTES
}
# normalisation items
norm.item <- function(MY.USER.VOTES, item) {
MY.USER.VOTES[,item]  <- apply(as.matrix(item), 1, function(item) (MY.USER.VOTES[,item] - min(MY.USER.VOTES[,item], na.rm=T)) / (max(MY.USER.VOTES[,item], na.rm=T) - min(MY.USER.VOTES[,item], na.rm=T)))
MY.USER.VOTES
}
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[6:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[6:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
mean.votes.genre
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
head(users.mean.votes)
genres
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[7:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[7:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
mean.votes.genre
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
head(users.mean.votes)
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[7:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[7:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
}
gender.binary <- function(MY.USER.VOTES) {
MY.USER.VOTES[,"gender"] <- MY.USER.VOTES[,"gender"] == "M"
MY.USER.VOTES[MY.USER.VOTES[,"gender"] == TRUE,"gender"] <- 1
MY.USER.VOTES[MY.USER.VOTES[,"gender"] == FALSE,"gender"] <- 0
MY.USER.VOTES
}
# normalisation items
norm.item <- function(MY.USER.VOTES, item) {
MY.USER.VOTES[,item]  <- apply(as.matrix(item), 1, function(item) (MY.USER.VOTES[,item] - min(MY.USER.VOTES[,item], na.rm=T)) / (max(MY.USER.VOTES[,item], na.rm=T) - min(MY.USER.VOTES[,item], na.rm=T)))
MY.USER.VOTES
}
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
head(users.mean.votes)
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
head(users.mean.votes)
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), jobs.names, genres)
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), jobs.names, genres)
NEW.USER
}
users.mean.votes <- jobs.as.matrix(users.mean.votes)
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), jobs.names, genres)
NEW.USER
jobs.names
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), jobs.names, genres)
NEW.USER
jobs.names
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), jobs.names, genres)
NEW.USER
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
head(users.mean.votes[,"writer"])
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
jobs.names <- unique(MY.USER.VOTES[,"job"])
colnames(NEW.USER) <- c(c("age", "gender"), jobs.names, genres)
NEW.USER
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes[,"writer"])
head(users.mean.votes)
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs.names <- unique(users.mean.votes[,"job"])
jobs.names <- unique(m[,"job"])
m[,"job"]
jobs.names <- unique(m[,"jobs"])
head(m)
jobs.names <- unique(u.user[,"job"])
jobs.names
c(c("age"), jobs.names)
c("age", jobs.names)
c("age", jobs.names)
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), sapply(jobs.names, as.character), genres) # TODO mettre des jobs.names comme nom de column
NEW.USER
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
# m : Matrice de donnees de 100 000 votes faits par 943 utilisateurs et portant sur 1682 items.
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
library(Matrix)
m <- sparseMatrix(u.data[,1],u.data[,2],x=u.data[,3])
rownames(m) <- paste('u', 1:nrow(m), sep='')
colnames(m) <- paste('i', 1:ncol(m), sep='')
# u.item : Matrice de donnees sur les films
u.item <- read.csv(file='u.item.csv', sep='|', header=T)
# u.user : Matrice de donnees sur les utilisateurs
u.user <- read.csv(file='u.user.csv', sep='|', header=T)
table(rowSums(m>0)) # nombres de notes par user
genres <- colnames(u.item)[7:24] # TODO enlever unknown?
user.attr <- c("age", "gender", "job")
# moyenne des votes par genre
mean.votes.genre <- function(MY.MATRIX, MY.ITEM, MY.USER) {
votes.tot <- as.matrix(MY.MATRIX) %*% as.matrix((MY.ITEM)[7:24])
nbr.votes <- as.matrix(MY.MATRIX>0) %*% as.matrix((MY.ITEM)[7:24])
mean.votes.genre <- votes.tot/nbr.votes
mean.votes.genre[is.nan(mean.votes.genre)] <- NA
NEW.USER <- cbind(MY.USER[,user.attr], mean.votes.genre)
colnames(NEW.USER) <- c(user.attr, genres)
NEW.USER
}
gender.binary <- function(MY.USER.VOTES) {
MY.USER.VOTES[,"gender"] <- MY.USER.VOTES[,"gender"] == "M"
MY.USER.VOTES[MY.USER.VOTES[,"gender"] == TRUE,"gender"] <- 1
MY.USER.VOTES[MY.USER.VOTES[,"gender"] == FALSE,"gender"] <- 0
MY.USER.VOTES
}
# normalisation items
norm.item <- function(MY.USER.VOTES, item) {
MY.USER.VOTES[,item]  <- apply(as.matrix(item), 1, function(item) (MY.USER.VOTES[,item] - min(MY.USER.VOTES[,item], na.rm=T)) / (max(MY.USER.VOTES[,item], na.rm=T) - min(MY.USER.VOTES[,item], na.rm=T)))
MY.USER.VOTES
}
jobs.as.matrix <- function(MY.USER.VOTES) {
jobs.names <- unique(MY.USER.VOTES[,"job"])
jobs <- MY.USER.VOTES[,"job"]
jobs.mat <- t(apply(as.matrix(jobs), 1, function(x) x == jobs.names))
jobs.mat[jobs.mat == TRUE] <- 1
jobs.mat[jobs.mat == FALSE] <- 0
NEW.USER <- cbind(MY.USER.VOTES[,c("age", "gender")], jobs.mat, MY.USER.VOTES[, genres])
colnames(NEW.USER) <- c(c("age", "gender"), sapply(jobs.names, as.character), genres) # TODO mettre des jobs.names comme nom de column
NEW.USER
}
users.mean.votes <- mean.votes.genre(m, u.item, u.user)
users.mean.votes <- norm.item(users.mean.votes, c("age",genres))
users.mean.votes <- gender.binary(users.mean.votes)
users.mean.votes <- jobs.as.matrix(users.mean.votes)
head(users.mean.votes)
setwd("~/Documents/UCL_Montreal_2018_2019/RECHERCHE")
ls
r36_w1 <- read.csv(file='r36_w1.csv', sep='|', header=T)
r36_w1 <- read.csv(file='r36_w1.csv', sep=',', header=T)
r36_w1 <- read.csv(file='data/r36_w1.csv', sep=',', header=T)
head(r36_w1)
unique(r36_w1[,'branch'])
which(r36_w1[,'branch'] == "try")
unique(r36_w1[,'branch'])
r36_w1_branches <- r36_w1[which(r36_w1[,'branch'] == ("try" | "mozilla-inbound" | "mozilla-central")),]
r36_w1_branches <- r36_w1[ (which(r36_w1[,'branch'] == "try" | which(r36_w1[,'branch'] == "mozilla-inbound" | which(r36_w1[,'branch'] == "mozilla-central")),]
r36_w1_branches <- r36_w1[ (which(r36_w1[,'branch'] == "try") | which(r36_w1[,'branch'] == "mozilla-inbound") | which(r36_w1[,'branch'] == "mozilla-central")),]
which(r36_w1[,'branch'] == "try"
which(r36_w1[,'branch'] == "try")
which(r36_w1[,'branch'] == "try")
r36_w1_branches <- r36_w1[c(which(r36_w1[,'branch'] == "try"), which(r36_w1[,'branch'] == "mozilla-inbound"), which(r36_w1[,'branch'] == "mozilla-central")),]
r36_w1_branches
unique(r36_w1_branches[,"branch"])
colnames(r36_w1_branches)
head(r36_w1_branches)
table(r36_w1_branches[,"buildid"])
table(r36_w1_branches[,"builduid"])
r36_w1_branches[r36_w1_branches["builduid"] == "3d61e0e34e60442f924ef3d27eebcaa3","builduid"]
r36_w1_branches[r36_w1_branches["builduid"] == 3d61e0e34e60442f924ef3d27eebcaa3,"builduid"]
table(r36_w1_branches[r36_w1_branches["builduid"] == "3d9094fc68fb4d31903aba784de04de9","builduid"])
r36_w1_branches[r36_w1_branches["builduid"] == "3d9094fc68fb4d31903aba784de04de9","builduid"]
colnames(r36_w1_branches)
unique(r36_w1_branches[,"product"])
unique(r36_w1_branches[,"comments"])
unique(r36_w1_branches[,"product"])
colnames(r36_w1_branches)
unique(r36_w1_branches[,"commit_titles"])
colnames(r36_w1_branches)
unique(r36_w1_branches[,"buildername"])
colnames(r36_w1_branches)
r36_w1_branches[,"commit_titles"]
colnames(r36_w1_branches)
unique(r36_w1_branches[,"commit_titles"])
unique(r36_w1_branches[,"commit_titles"])
unique(r36_w1_branches[,"who"])
colnames(r36_w1_branches)
buildid
r36_w1_branches[,"buildid"]
colnames(r36_w1_branches)
unique(r36_w1_branches[,"build_id"])
colnames(r36_w1_branches)
unique(r36_w1_branches[,"buildnumber"])
colnames(r36_w1_branches)
unique(r36_w1_branches[,"builduid"])
table(r36_w1_branches[,"builduid"])
colnames(r36_w1_branches)
r36_w1_branches[,"reason"]
colnames(r36_w1_branches)
r36_w1_branches[,"Time"]
r36_w1_branches[,"TimeSec"
]
colnames(r36_w1_branches)
r36_w1_branches[,"reasonAbs"]
colnames(r36_w1_branches)
table(r36_w1_branches[,"revision"])
table(r36_w1_branches[,"revision_12C"])
colnames(r36_w1_branches)
?aggregate
list(r36_w1_branches[,"build_id"])
aggregate(r36_w1_branches[,c("build_id", "builduid")],list(r36_w1_branches[,"build_id"]),sum)
count(c(1,2,3))
aggregate(r36_w1_branches[,c("build_id", "builduid")],list(r36_w1_branches[,"build_id"]),length)
aggregate(head(r36_w1_branches)[,c("build_id", "builduid")],list(head(r36_w1_branches)[,"build_id"]),length)
aggregate(r36_w1_branches[,c("build_id", "builduid")],list(r36_w1_branches[,"build_id"]),length)
unique(r36_w1_branches[,"build_id"])
length(unique(r36_w1_branches[,"build_id"]))
length((r36_w1_branches[,"build_id"]))
length(unique(r36_w1_branches[,"builduid"]))
length(unique(r36_w1_branches[,"buildid"]))
length(unique(r36_w1_branches[,"buil_id"]))
length(unique(r36_w1_branches[,"buils_id"]))
length(unique(r36_w1_branches[,"build_id"]))
length(unique(r36_w1_branches[,"builduid"]))
colnames(r36_w1_branches)
length(unique(r36_w1_branches[,"revision_12C"]))
length(unique(r36_w1_branches[,"revision"]))
id diff
# 3302 builduid diff
# total info : 338305
# 1403 revision_12C
# 2406 revision
r36_w1_branches[,"revision"]
colnames(r36_w1_branches)
(unique(r36_w1_branches[,"build_id"]))
colnames(r36_w1_branches)
(unique(r36_w1_branches[,"buildid"]))
(unique(r36_w1_branches[,"buildnumber"]))
length(unique(r36_w1_branches[,"buildnumber"]))
length(unique(r36_w1_branches[,"build_id"]))
length(unique(r36_w1_branches[,"builduid"]))
(unique(r36_w1_branches[,"builduid"]))
(unique(r36_w1_branches[,"buildid"]))
colnames(r36_w1_branches)
buildid
(unique(r36_w1_branches[,"count_elements"]))
(unique(r36_w1_branches[,"got_revision"]))
colnames(r36_w1_branches)
r36_w1_branches[,c("revision", "got_revision")]
colnames(r36_w1_branches)
(unique(r36_w1_branches[,"build_id"]))
(table(r36_w1_branches[,"build_id"]))
(length(r36_w1_branches[,"build_id"]))
(length(unique((r36_w1_branches[,"build_id"])))
(length(unique((r36_w1_branches[,"build_id"])))
# 338305 build_id diff
)# 3302 builduid diff
sdqj
length(unique(r36_w1_branches[,"build_id"]))
length((r36_w1_branches[,"build_id"]))
length((r36_w1_branches[,"builduid"]))
length(unique(r36_w1_branches[,"builduid"]))
length(unique(r36_w1_branches[,"buildnumber"]))
length((r36_w1_branches[,"buildnumber"]))
colnames(r36_w1_branches)
r36_w1_branches[,c("count_elements", "buildername")]
setwd("~/Documents/UCL_Montreal_2018_2019/LOG6308")
load(url("http://www.groupes.polymtl.ca/log6308/Public/20173/1486776.Rsave"))
library(curl)
load(url("http://www.groupes.polymtl.ca/log6308/Public/20173/1486776.Rsave"))
m[1:10,1:10]
q.item
users
items
load(url("http://www.groupes.polymtl.ca/log6308/Public/20173/data.Rsave"))
load(url("http://www.groupes.polymtl.ca/log6308/Public/20173/data.Rsave"))
items
q.items
q.item
cor(matrix(c(1,2,1,4),2))
cor(matrix(c(1,2,1,4),2), )
d <- data.frame(a=c(1,2), b=c(1,4))
cor(d, by, a)
cor(d, by=d$a)
cor(d)
dim(users)
users %*% t(items)
dim(users %*% t(items))
sqrt(sum((users %*% t(items) - m)^2)) / 200000
sqrt(sum((users %*% t(items) - m)^2))
sqrt(sum((users %*% t(items) - m)^2)) / 200000
(users %*% t(items) - m)
colnames(r36_w1_branches)
setwd("~/Documents/UCL_Montreal_2018_2019/LOG6308/RecommandationTP/TP3")
exp(1:10)
exp(1:10 * 0.5)
exp(1:10 * 0.6)
exp(1:15 * 0.6)
exp(1:10 * 0.5)
exp(1:15 * 0.5)
exp(1:15 * 0.3)
exp(1:15 * 0.4)
exp(1:20 * 0.4)
exp(1:17 * 0.5)
exp(1:16 * 0.5)
exp(1:15 * 0.5)

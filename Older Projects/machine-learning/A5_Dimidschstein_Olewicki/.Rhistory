FN <- sum(wrong[Pos])
1/2 * (TP/(TP+FN) + TN/(TN+FP))
}
BCR(c(1,1,0,0), c(1,1,0,0), 1)
BCR(c(1,1,0,0), c(1,1,1,0), 1)
BCR(c(1,1,0,0), c(1,1,1,1), 1)
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
CpyCleanedTrainSet == CpyCleanedTrainSet[1,]
CpyCleanedTrainSet == CpyCleanedTrainSet[,1]
CpyCleanedTrainSet == CpyCleanedTrainSet[,2]
CpyCleanedTrainSet == CpyCleanedTrainSet[,2]
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
CpyCleanedTrainSet$class
CpyCleanedTrainSet
source("assignment5.R")
cleanedTrainSet$class <- (trainLabels)
> cleanedTrainSet$class
CpyCleanedTrainSet <- cleanedTrainSet
CpyCleanedTrainSet
bagging <- function(my_data, my_test, B = 10, mymaxdepth = 2) {
local_pred_train <- matrix(0, (dim(my_data))[1], 2)
local_pred_test <- matrix(0, (dim(my_test))[1], 2)
for (i in 1:B) {
local_sample <- sampleOnData(my_data, percent = 100, resample = TRUE)
local_rpart <- rpart(formula = class ~ ., data=local_sample, control = rpart.control(minsplit = 1, cp = 0.0, maxdepth=mymaxdepth)) #build the learning tree
local_BCR <- BCR(round(predict(local_rpart, my_data)), my_data$class, 1)
local_pred_train <- local_pred_train + local_BCR * predict(local_rpart, my_data)
local_pred_test <- local_pred_test + local_BCR * predict(local_rpart, my_test)
print("coucou")
print(local_BCR)
print(predict(local_rpart, my_data))
# print(predict(local_rpart, my_test))
}
# local_pred_train <- round(local_pred_train/dim(my_data))
# local_pred_test <- round(local_pred_test/dim(my_test))
data.frame(train = local_pred_train, test = local_pred_test)
}
sol <- bagging(CpyCleanedTrainSet, testSet, mymaxdepth = 30)
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
TRUE ==1
source("assignment5.R")
source("assignment5.R")
FALSE == FALSE
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
true_val = "Metastasis"
false_val = "No Metastasis"
real = c("Metastasis", "Metastasis", "No Metastasis", "No Metastasis")
pred = c("Metastasis", "No Metastasis", "Metastasis", "No Metastasis")
Pos <- real == true_val
Neg <- Pos == FALSE
good <- back2meta == real
wrong <- good == FALSE
TP <- sum(good[Pos])
FP <- sum(wrong[Neg])
TN <- sum(good[Neg])
FN <- sum(wrong[Pos])
print("tp")
print(TP)
print("fp")
print(FP)
print("tn")
print(TN)
print("fn")
print(FN)
source("assignment5.R")
true_val = "Metastasis"
false_val = "No Metastasis"
real = c("Metastasis", "Metastasis", "No Metastasis", "No Metastasis")
pred = c("Metastasis", "No Metastasis", "Metastasis", "No Metastasis")
Pos <- real == true_val
Neg <- Pos == FALSE
good <- pred == real
wrong <- good == FALSE
TP <- sum(good[Pos])
FP <- sum(wrong[Neg])
TN <- sum(good[Neg])
FN <- sum(wrong[Pos])
true_val = "Metastasis"
false_val = "No Metastasis"
real = c("Metastasis", "Metastasis", "No Metastasis", "No Metastasis")
back2meta = c("Metastasis", "No Metastasis", "Metastasis", "No Metastasis")
Pos <- real == true_val
Neg <- Pos == FALSE
good <- back2meta == real
wrong <- good == FALSE
TP <- sum(good[Pos])
FP <- sum(wrong[Neg])
TN <- sum(good[Neg])
FN <- sum(wrong[Pos])
print("tp")
print(TP)
print("fp")
print(FP)
print("tn")
print(TN)
print("fn")
print(FN)
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
my_data= CpyCleanedTrainSet
my_test=testSet
B=10
mymaxdepth = 5
percent <- 50
len <- dim(my_data)[1]
indices <- sample.int(n=len, size=min(len, floor(len * (percent/100))), replace = FALSE)  # Indices splitting
cut_1 <- my_data[indices, ]
cut_2 <- my_data[indices==0, ]
local_pred_train <- matrix(0, (dim(cut_2))[1], 2)
local_pred_test <- matrix(0, (dim(my_test))[1], 2)
for (i in 1:B) {
local_sample <- sampleOnData(cut_1, percent = 100, resample = TRUE)
local_rpart <- rpart(formula = class ~ ., data=local_sample, control = rpart.control(minsplit = 1, cp = 0.0, maxdepth=mymaxdepth)) #build the learning tree
local_BCR <- BCR(predict(local_rpart, cut_2), cut_2$class)
local_pred_train <- local_pred_train + local_BCR * predict(local_rpart, cut_2)
local_pred_test <- local_pred_test + local_BCR * predict(local_rpart, my_test)
}
for (i in 1:(dim(cut_2))[1]) {
local_pred_train[i,] <- (local_pred_train[i,] == max(local_pred_train[i,]))
}
for (i in 1:(dim(my_test))[1]) {
local_pred_test[i,] <- (local_pred_test[i,] == max(local_pred_test[i,]))
}
dim(local_pred_train)
local_pred_train
cut_2
dim(cut_2)
dim(my_data)
percent <- 50
len <- dim(my_data)[1]
indices <- sample.int(n=len, size=min(len, floor(len * (percent/100))), replace = FALSE)  # Indices splitting
cut_1 <- my_data[indices, ]
cut_2 <- my_data[-indices, ]
local_pred_train <- matrix(0, (dim(cut_2))[1], 2)
local_pred_test <- matrix(0, (dim(my_test))[1], 2)
dim(cut_2)
source("assignment5.R")
source("assignment5.R")
my_data= CpyCleanedTrainSet
> my_test=testSet
> B=10
> mymaxdepth = 5
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
sol
sol$bcr
sol$bcr[1]
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
my_data = CpyCleanedTrainSet
my_test = testSet
mymaxdepth = 5
n=2
mem_test <- matrix(0, (dim(my_test))[1], 2)
mem_bcr <- 0
for (i in 1:n) {
bag <- bagging(my_data, my_test, B, mymaxdepth)
mem_test <- mem_test + bag$pred_test
mem_bcr <- mem_bcr + bag$bcr[1]
}
dim(mem_test)
length(mem_bcr)
length(mem_test)
bag <- bagging(my_data, my_test, B, mymaxdepth)
bag$pred_test.Metastasis
for (i in 1:n) {
bag <- bagging(my_data, my_test, B, mymaxdepth)
mem_test[,1]  <- mem_test[,1] + bag$pred_test.Metastasis
mem_test[,2]  <- mem_test[,2] + bag$pred_test.No.Metastasis
mem_bcr <- mem_bcr + bag$bcr[1]
}
baf
bag
dim(mem_test)
mem_test <- matrix(0, (dim(my_test))[1], 2)
dim(mem_test)
bag <- bagging(my_data, my_test, B, mymaxdepth)
mem_test[,1]  <- mem_test[,1] + bag$pred_test.Metastasis
source("assignment5.R")
sol
rep(0,3)
rep(0,3)
sol
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
sol
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
c(1,2) / c(3,4)
c(1,2) / c(3,4)
c(1,2) / c(3,4)
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
sol$bcr
sol$bcr
source("assignment5.R")
sol$bcr
source("assignment5.R")
sol$bcr
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
sol$bcr
sol$bcr
source("assignment5.R")
sol$bcr
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
sol$bcr
source("assignment5.R")
sol$bcr
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
cleanedTrainSet
cleanedTrainSet$class
cleanedTrainSet$class <- if ((trainLabels) == "Metastasis") "M" else "N"
cleanedTrainSet$class[(trainLabels) == "Metastasis"] <- "M"
cleanedTrainSet$class[(trainLabels) == "No Metastasis"] <- "N"
sol_svm <- repeatSVMPercent(CpyCleanedTrainSet, testSet, n=10, percent=50, param = data.frame(kernel='poly', degree=1, gamma=(1/(dim(CpyCleanedTrainSet)[2]-2)) *2, coef0=1, cost=2))
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
?na
na.omit
na.replace
?na.omit
cleanedTrainSet[1001:1006]
source("assignment5.R")
cleanedTrainSet[1001:dim(cleanedTrainSet)[2]]
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
?svm
?svm
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
pred
pred
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
na.exclude()
?na.exclude
?na.exclude
na.exclude()
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
CpyCleanedTestSet[1001:1006]
CpyCleanedTestSet[,1001:1006]
CpyCleanedTestSet[,1001:1005]
CpyCleanedTestSet[,1001:length(CpyCleanedTestSet)]
CpyCleanedTestSet[,1001:length(CpyCleanedTestSet)]
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
sol_svm$pred_test
names(trainLabels)
(trainLabels)
source("assignment5.R")
source("assignment5.R")
sol_iter_bagging$test
source("assignment5.R")
source("assignment5.R")
meanTrain
dim(meanTrain)
length(meanTrain)
dim(CpyCleanedTestSet[1:length(CpyCleanedTestSet)-1])
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
source("assignment5.R")
testLabels
row.names(testSet)
sol_svm$pred_test
data.frame(c(sol_svm$bcr, sol_svm$pred_test), row.names = c("BCR", row.names(testSet)))
length(sol_svm$pred_test)
length(row.names(testSet))
length(c(sol_svm$bcr, sol_svm$pred_test))
data.frame(c(sol_svm$bcr[1], sol_svm$pred_test), row.names = c("BCR", row.names(testSet)))
source("assignment5.R")
final
print(sol_svm$pred_test)
final <- data.frame(c(sol_svm$bcr[1], factor(sol_svm$pred_test)), row.names = c("BCR", row.names(testSet)))
final
?data.frame
?write.csv
write.csv(x=final, file="out.csv")
data.frame(c(factor(sol_svm$pred_test)), row.names = c(row.names(testSet)))
c(sol_svm$bcr[1], factor(sol_svm$pred_test))
factor(sol_svm$pred_test)
final <- factor(sol_svm$pred_test)
row.names(final) <- row.names(testSet)
final
first <- data.frame(Prediction = sol_svm$bcr[1], row.names = "BCR")
second <- data.frame(Prediction = sol_svm$pred_test, row.names = row.names(testSet))
first
second
write.csv(x=first, file="out.csv")
write.csv(x=second, file="out.csv", col.names = FALSE, append = TRUE)
write.csv(x=first, file="out.csv")
write.csv(x=second, file="out.csv", col.names = FALSE, append = TRUE)
write.csv(x=first, file="out.csv", append = TRUE)
write.csv(x=second, file="out.csv", col.names = FALSE, append = TRUE)
write.csv(x=first, file="out.csv")
write.csv(x=second, file="out.csv", col.names = FALSE)
write.csv(x=first, file="out.csv", append = TRUE)
write.csv(x=second, file="out.csv", append = TRUE)
write.csv(x=first, file="out.csv")
write.csv(x=second, file="out.csv")
merge(first, second)
merge(first, second, by="Prediction")
merge(first, second, by="ID")
merge(first, second, by="")
merge(first, second, by="Prediction")
rbind(first, second)
bcr <- data.frame(Prediction = sol_svm$bcr[1], row.names = "BCR")
pred <- data.frame(Prediction = sol_svm$pred_test, row.names = row.names(testSet))
final <- rbind(bcr, pred)
write.csv(x=final, file="out.csv")
bcr <- data.frame(Prediction = sol_svm$bcr[1], row.names = "BCR")
pred <- data.frame(Prediction = sol_svm$pred_test, row.names = row.names(testSet))
final <- rbind(bcr, pred)
write.csv(x=final, file="Predictions.csv")
